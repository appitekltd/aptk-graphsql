/*
 *  @class - GraphQL
 *  @desc - Takes in a standard GraphQL query and any variables, parses this 
 *    query into a JSON-like structure, runs all the needed SOQL queries 
 *    and then returns the result in the matching GraphQL structure
 */
@RestResource(urlMapping='/graphql')
global with sharing class GraphQL {
    
  // globals to store our queries and errors as we go
  global static List<String> parseErrors  = new List<String>();
  global static List<String> queries = new List<String>();
    
  /*
   *  @method - postquery()
   *  @desc - Handles the post request sent to the graphql endpoint.
   *    Parses the GraphQL query sent and handles the rest
   */
  @HttpPost
  global static String postQuery() {
    try {
      // get request data
      RestRequest req = RestContext.request;
      String data = req.requestBody.toString();
      // parse post structure
      PostData post = (PostData) JSON.deserialize(data, PostData.class);
      // run the query through our logic
      return runQuery(post.query, post.variables);
    } catch(Exception err) {
      parseErrors.add(err.getMessage());
      ResultData data = new ResultData();
      data.data = null;
      data.errors = parseErrors;
      data.queries = null;
      return JSON.serialize(data);
    }
  }
    
  /*
   *  @method -runQuery()
   *  @desc - Runs the given GraphQL query, using any passed in variables.
   *    This function is also called in the VF page so is exactly the same 
   *    result between the playground and API (albeit playground is slower)
   */
  @AuraEnabled
  @RemoteAction
  global static String runQuery(String query, Map<String, Object> variables) {
    // create empty result
    Map<String, Object> result = new Map<String, Object>();
    // update any variables in the query
    if (variables != null) {
      for (String var : variables.keySet()) {
        String encode = EncodingUtil.urlEncode(String.valueOf(variables.get(var)), 'UTF-8');
        query = query.replaceAll('\\$' + var, encode);
      }
    }
    // make sure the query isn't blank
    if (query == null || query == '{}' || query == '') {
      parseErrors.add('Invalid GraphQL Query, please check your syntax.');
    }
    // get our request parsed as JSON structure
    Map<String, ObjectData> objectRequest = graphQLToJson(query);
    // for each of the objects in our json build the query for it
    // we then run the query and save the data back on the object
    for (String objectName : objectRequest.keySet()) {
      ObjectData obj = objectRequest.get(objectName);
      objectRequest.put(objectName, addQuery(obj, null));
    }
    // now we have the data for each object we build our results object
    for (String objectName : objectRequest.keySet()) {
      ObjectData obj = objectRequest.get(objectName);
      result.put(obj.objectNickname, updateResults(obj.queryResults, obj));
    }
    // this is then returned as the result, passing in any errors we might have had
    // and all the queries we ran
    ResultData data = new ResultData();
    data.data = result;
    data.errors = parseErrors;
    data.queries = queries;
    String res = JSON.serialize(data);
    return res;
  }

  
  /*
   *  @method - graphQLToJson()
   *  @desc - Parses the GraphQL structure into a JSON Map with all the details
   *    we need about each section. See the ObjectData class for more details.
   */
  private static Map<String, ObjectData> graphQLToJson(String query) {
    // Remove any extra spacing and ensure all tabs / spaces are consistant
    // Also add in 'object' start and end points
    query = normaliseGraphQL(query);
    // Split the query into each finished section
    List<String> sections = query.split('\\}');
    // This json will match the structure of the GraphQL query
    Map<String, ObjectData> json = new Map<String, ObjectData>();
    // As we go down into nested objects and back up we keep track of
    // What our current object is and how far down we've gone
  	ObjectData current;
    List<ObjectData> history = new List<ObjectData>();
    // Go through each section
    for (Integer s = 0; s < sections.size(); s++) {
      List<String> section = sections[s].split('\\{');
      for (Integer i = 0; i < section.size(); i++) {
        String segment = section[i];
        if (segment != '') {
          // start of an object nest
          if (segment.indexOf('XSTARTX') != -1 && segment.indexOf('XENDX') == -1) {
            List<String> parameters = segment.split(' ');
            String objec = parameters[parameters.size() - 2];
            // only object
            if (parameters.size() == 2) {
              ObjectData obj = getObject(objec);
              if (obj != null) {
                json.put(obj.objectName, obj);
                current = json.get(obj.objectName);
                history.add(current); 
              } else {
                break;
              }
            // has fields
            } else if (parameters.size() > 2) {
              parameters.remove(parameters.size() - 1);
              parameters.remove(parameters.size() - 1);
              // get fields
              List<String> fields = new List<String>();
              for (Integer p = 0; p < parameters.size(); p++) {
                if (parameters[p] != '') fields.add(parameters[p]);    
              }
              // get the specific object
              ObjectData obj = getObject(objec);
              if (obj != null) {
                if (current == null) {
                  // set the object as the first current
                  json.put(obj.objectName, obj);
                  current = json.get(obj.objectName);
                } else {
                  // otherwise update the current
                  current.requestFields = fields;
                  current.requestChildren.put(obj.objectName, obj);
                  current = current.requestChildren.get(obj.objectName);
                }
                history.add(current);
              } else {
                break;
              }
            }
          // go up an object in the stack
          } else if (segment.indexOf('XENDX') != -1) {
            // update our history
            if (history.size() > 0) history.remove(history.size() - 1);
            current = history.size() - 1 > 0 ? history[history.size() - 1] : null;
            if (segment.indexOf('XSTARTX') != -1) {
              List<String> parameters = segment.split('XENDX')[1].split(' ');
              String objec = parameters[parameters.size() - 2];
              ObjectData obj = getObject(objec);
              if (obj != null) {
                if (current == null) {
                  // set the object as the first current
                  json.put(obj.objectName, obj);
                  current = json.get(obj.objectName);
                } else {
                  // otherwise update the current
                  current.requestChildren.put(obj.objectName, obj);
                  current = current.requestChildren.get(obj.objectName);
                }
              } else {
                break;
              }
            } else if (segment.indexOf(' ') != -1 && current != null) {
              // make sure fields get added to the correct object
              List<String> fields = segment.split('XENDX')[1].split(' ');
              for (Integer f = 0; f < fields.size(); f++) {
                current.requestFields.add(fields[f]);
              }
            }
          } else {
            // make sure fields get added to the correct object
            List<String> fields = segment.split(' ');
            for (Integer f = 0; f < fields.size(); f++) {
              if (current != null && fields[f] != '') current.requestFields.add(fields[f]);
            }
          }
        }
      }
    }
    return json;
  }

  
  /*
   *  @method - normaliseGraphQL()
   *  @desc - Makes all spacing / tabbing consistent, and marks the start and end point
   *    of specific sections / objects
   */
  private static String normaliseGraphQL(String query) {
    // get rid of the first opening bracket
    query = query.replaceFirst('\\{', '');
    // mark all starts and ends, and remove parameter spacing
    query = query.replaceAll('\\}', '}XENDX ').replaceAll('\\{', ' XSTARTX{').replace(': ', ':');
    String newquery;
    // make all query options consistent
    List<String> segments = query.split('\\(');
    for (Integer s = 0; s < segments.size(); s++) {
      String open = s == 0 ? '' : '(';
      String segment = open + segments[s];
      if (segment.indexOf(')') != -1) {
        String start = segment.split('\\)')[0].replaceAll(' ', ',');
        segment = start + ')' + segment.split('\\)')[1];
      }
      if (segment != null) newquery += segment;
    }
    // make any spacing consistent
    newquery = newquery.replaceAll('\n', '').replaceAll('\t\t', ' ').replaceAll('\t', ' ').replaceAll('  ', ' ').replaceAll(': ', ':');
    return newquery;
  }

  /*
   *  @method -  getObject()
   *  @desc - Gets a specific 'object', which is the Sf object with any parameters
   *    passed in, i.e. Nickname: Account(limit:2)
   */
  private static ObjectData getObject(String objectName) {
    ObjectData obj = new ObjectData();
    List<String> optionList = new List<String>();
    Map<String, String> options = new Map<String, String>();
    String nickname = null;
    // if we have options add them to the option list
    if (objectName.indexOf('(') != -1) {
      String opts = objectName.split('\\(')[1].split('\\)')[0];
      optionList = opts.split(',');
      for (Integer o = 0; o < optionList.size(); o++) {
        String lhs = optionList[o].split(':').size() > 0 ? optionList[o].split(':')[0] : null;
        String rhs = optionList[o].split(':').size() > 1 ? optionList[o].split(':')[1] : null;
        options.put(lhs, rhs);
      }
      objectName = objectName.split('\\(')[0];
    }
    // if we have a nickname set the nickname
    if (objectName.indexOf(':') != -1) {
      nickname = objectName.split(':')[0];
      objectName = objectName.split(':')[1];
    } else {
      nickname = objectName;
    }
    // get the actual object in SF and it's relationships
    SObjectType objType = Schema.getGlobalDescribe().get(objectName);
    Map<String, String> actualChildren = new Map<String, String>();
    List<String> actualFields = new List<String>();
    if (objType != null) {
      // get the metadata so we can describe the fields
      Schema.DescribeSObjectResult objMeta = objType.getDescribe();
      Map<String, Schema.SObjectField> objFields = objMeta.fields.getMap();
      // we use this so we can check fields given to us are valid SF fields
      for (String field : objFields.keySet()) {
        String name = objFields.get(field).getDescribe().getName();
        actualFields.add(name);
      }
      // same again with the children so we can check if we have nested valid
      // children objects
      List<Schema.ChildRelationship> children = objMeta.getChildRelationships();
      for (Integer c = 0; c < children.size(); c++) {
        String name = children[c].getChildSObject().getDescribe().getName(); 
        String relationship = children[c].getField().getDescribe().getName();
        actualChildren.put(name, relationship);
      }
    } else {
      // invalid object
      parseErrors.add(objectName + ' is not a valid sObject.'); return null;
    }
    // set object data
    obj.queryOptions = options;
    obj.queryString = null;    
    obj.queryResults = new List<sObject>();
    obj.queryResultIds = new List<Id>();
    obj.objectName = objectName;
    obj.objectNickname = nickname;
    obj.actualFields = actualFields;
    obj.requestFields = new List<String>();
    obj.actualChildren = actualChildren;
    obj.requestChildren = new Map<String, ObjectData>();
    return obj;
  }
    
  /*
   *  @method - addQuery()
   *  @desc - Turns our object structure into a valid SQOL query, then runs
   *    that query and returns the object with updated results
   */ 
  private static ObjectData addQuery(ObjectData obj, ObjectData parent) {
    // get the SQL query
    obj.queryString = jsonToSQL(obj, parent);
    try {
      // run the query
      List<sObject> results = Database.query(obj.queryString);
      // set the results to the object to use in potential nested objects
      List<Id> ids = new List<Id>();
      for (Integer r = 0; r < results.size(); r++) {
        ids.add(results[r].Id);  
      }
      obj.queryResultIds = ids;
      obj.queryResults = results;
      // add child object records and run their queries too
      for (String child : obj.requestChildren.keySet()) {
        ObjectData chi = obj.requestChildren.get(child);
        obj.requestChildren.put(child, addQuery(chi, obj));
      }
      return obj;
    } catch(Exception err) {
      // if any queries fail we add that error and return the object anyay
      parseErrors.add(err.getMessage()); return obj;
    }
  }
    
  /*
   *  @method - jsonToSQL()
   *  @desc - Given our object data we build the SQL query for it, including any 
   *    parent links if needed
   */ 
  private static String jsonToSQL(ObjectData obj, ObjectData parent) {
    // make sure we only use real fields from the metadata
    // this ignores any fields specified in the GraphQL query that are not 
    // real SF fields
    List<String> realFields = new List<String>();
    for (Integer f = 0; f < obj.requestFields.size(); f++) {
      String field = obj.requestFields[f];
      if (obj.actualFields.indexOf(field) != -1) realFields.add(field);
    }
    // set the parent link if any
    if (parent != null) {
      String link = parent.actualChildren.get(obj.objectName);
      if (link != null) realFields.add(link);
    }
    // build the query
    String query = 
      'SELECT ' +
      String.join(realFields, ', ') +
      ' FROM ' + obj.objectName;
    // add link IDs if there is a parent
    if (parent != null) {
      String link = parent.actualChildren.get(obj.objectName);
      if (link != null) {
        query += ' WHERE ' + link + ' IN ' + '(\'' + String.join(parent.queryResultIds, '\', \'') + '\') ';
      }
    }
    // add in any of our query options based on what was based into the object
    // i.e. (limit:2,Status:Open)
    for (Integer i = 0; i < realFields.size(); i++) {
      String filter = obj.queryOptions.get(realFields[i]);
      if (filter != null) {
        filter = EncodingUtil.urlDecode(filter, 'UTF-8');
        if (query.indexOf('WHERE') == -1) {
          query += ' WHERE ' + realFields[i] + ' = \'' + filter + '\'';
        } else {
          query += ' AND ' + realFields[i] + ' = \'' + filter + '\'';
        }
      }
    }
    // set offset and limis if any
    String offset = obj.queryOptions.get('offset');
    String lim = obj.queryOptions.get('limit');
    if (lim != null) query += ' LIMIT ' + lim;
    if (offset != null) query += ' OFFSET ' + offset;
    queries.add(query);
    return query;
  }

  /*
   *  @method - updateResults()
   *  @desc - When an object has been queried we now have the data and can set this
   *    to the result, making sure to keep the original GraphQL structure
   */ 
  private static List<Map<String, Object>> updateResults(List<sObject> results, ObjectData obj) {
    List<Map<String, Object>> updated = new List<Map<String, Object>>();
    // check the fields were real
    List<String> realFields = new List<String>();
    for (Integer f = 0; f < obj.requestFields.size(); f++) {
      String field = obj.requestFields[f];
      if (obj.actualFields.indexOf(field) != -1) realFields.add(field);
    }
    // for each result on this object
    for (Integer i = 0; i < results.size(); i++) {
      Map<String, Object> res = new Map<String, Object>();
      sObject r = results[i];
      // set the fields and their val to the result
      for (Integer f = 0; f < realFields.size(); f++) {
        res.put(realFields[f], r.get(realFields[f]));
      }
      // add in any child object structures
      for (String child : obj.requestChildren.keySet()) {
        ObjectData cobj = obj.requestChildren.get(child);
        List<sObject> matches = new List<sObject>();
        String link = obj.actualChildren.get(cobj.objectName);
        if (link != null) {
          for (Integer c = 0; c < cobj.queryResults.size(); c++) {
            sObject chi = cobj.queryResults[c];
            if (chi.get(link) == results[i].Id) {
              matches.add(chi);
            }  
          }
        }
        res.put(cobj.objectNickname, updateResults(matches, cobj));
      }
      updated.add(res);
    }
    return updated;
  }

  // structure for the inbound post
  public class PostData {
    public String query;
    public Map<String, String> variables;
  }
    
  // structure for the returned result
  public class ResultData {
    public Map<String, Object> data;
    public List<String> errors;
    public List<String> queries;
  }
    
  // custom structure to store each 'object' in the graphql query
  public class ObjectData {
    public Map<String, String> queryOptions;
    public String queryString;
    public List<sObject> queryResults;
    public List<Id> queryResultIds;
    public String objectName;
    public String objectNickname;
    public List<String> requestFields;
    public List<String> actualFields;
    public Map<String, ObjectData> requestChildren;
    public Map<String, String> actualChildren;
  }

}